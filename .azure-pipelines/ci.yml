trigger:
- master

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

resources:
  repositories:
  - repository: templates
    type: github
    name: swellaby/azure-pipelines-templates
    endpoint: swellaby

steps:
- checkout: self
  persistCredentials: false
  clean: true

- template: templates/yml/node/combo/npm-build-validation-xunit-cobertura.yml@templates
  parameters:
    publishTestResults:
      taskDisplayName: 'Publish unit test results'
      testResultsFormat: 'JUnit'
      testResultsFiles: 'xunit.xml'
      searchFolder: '$(Build.SourcesDirectory)/.testresults/unit'
      testRunTitle: 'azdo-shellcheck::Unit Tests::CI - Build $(Build.BuildId)'

- script: |
    bash <(curl -s https://codecov.io/bash) -t $(codecovToken)
  displayName: 'Publish coverage to Codecov'

- script: |
    git checkout master
    git config user.name $(githubUser)
    git config user.email $(githubEmail)
    npm -f version $(packageBumpType) -m "chore: Bumped to version %s from release pipeline $(succinctAllSkipTokens)"
    export PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version);")
    echo "##vso[task.setVariable variable=packageVersion]$PACKAGE_VERSION"
    npm run package:ext
    git add package-lock.json vss-extension.json src/tasks
    git commit -n -m "chore: Bumped to version $PACKAGE_VERSION from release pipeline $(succinctAllSkipTokens)"
    git push https://$(githubPat)@github.com/swellaby/azdo-shellcheck.git
  displayName: 'Package extension'

- template: templates/yml/any/sonar/run-sonar-cloud-cli-analysis.yml@templates
  parameters:
    projectVersion: $(packageVersion)

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: $(vsixArtifactName)
    targetPath: '$(Build.SourcesDirectory)/.vsix'
  displayName: 'Upload extension VSIX'

- task: ArchiveFiles@2
  displayName: 'Archive: full repo'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: false
    archiveType: tar
    archiveFile: '$(repoArchivePath)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: full repo'
  inputs:
    PathtoPublish: '$(repoArchivePath)'
    ArtifactName: '$(repoArtifactName)'
