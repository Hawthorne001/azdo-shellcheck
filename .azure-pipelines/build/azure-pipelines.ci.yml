trigger:
- master

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

resources:
  repositories:
  - repository: templates
    type: github
    name: swellaby/azure-pipelines-templates
    endpoint: swellaby

steps:
- template: templates/yml/node/combo/npm-build-validation-xunit-cobertura.yml@templates
  parameters:
    publishTestResults:
      taskDisplayName: 'Publish unit test results'
      testResultsFormat: 'JUnit'
      testResultsFiles: 'xunit.xml'
      searchFolder: '$(Build.SourcesDirectory)/.testresults/unit'
      testRunTitle: 'azdo-shellcheck::Unit Tests::CI - Build $(Build.BuildId)'

- script: |
    bash <(curl -s https://codecov.io/bash) -t $(codecovToken)
  displayName: 'Publish coverage to Codecov'

- script: |
    git checkout master
    git config user.name "calebcartwright"
    git config user.email "caleb.cartwright@outlook.com"
    npm -f version $(packageBumpType) -m "Bumped to version %s from release pipeline $(succinctAllSkipTokens)"
    npm run package:ext
    git add package-lock.json vss-extension.json src/tasks
    git commit -n -m "chore: Bumped to version %s from release pipeline $(succinctAllSkipTokens)"
    git -c http.extraheader="AUTHORIZATION: basic $SYSTEM_ACCESS_TOKEN" push
  env:
    SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
  displayName: 'Package extension'

- script: |
    export PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version);")
    echo "##vso[task.setvariable variable=packageVersion]$PACKAGE_VERSION"
  displayName: 'Set variables'

- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'SonarCloud Swellaby'
    organization: swellaby
    scannerMode: CLI
    extraProperties: |
      sonar.projectVersion=$(packageVersion)

- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
  displayName: 'Run code analysis'

- task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
  displayName: 'Publish quality gate result'

- task: PublishBuildArtifacts@1
  inputs:
    ArtifactName: $(vsixArtifactName)
    targetPath: '$(Build.SourcesDirectory)/.vsix'
  displayName: Publish extension VSIX
